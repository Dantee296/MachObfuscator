import XCTest

class Mach_Parsing_FatIos_Tests: XCTestCase {

    let expectedSelectors = [
        "counterLabel", "setCounterLabel:", "viewDidLoad", "didTapIncrement:", "initWithNibName:bundle:", "initWithCoder:", ".cxx_destruct", "setText:", "init", "dealloc", "window", "setWindow:", "applicationDidFinishLaunching:", "application:willFinishLaunchingWithOptions:", "application:didFinishLaunchingWithOptions:", "applicationDidBecomeActive:", "applicationWillResignActive:", "application:handleOpenURL:", "application:openURL:sourceApplication:annotation:", "application:openURL:options:", "applicationDidReceiveMemoryWarning:", "applicationWillTerminate:", "applicationSignificantTimeChange:", "application:willChangeStatusBarOrientation:duration:", "application:didChangeStatusBarOrientation:", "application:willChangeStatusBarFrame:", "application:didChangeStatusBarFrame:", "application:didRegisterUserNotificationSettings:", "application:didRegisterForRemoteNotificationsWithDeviceToken:", "application:didFailToRegisterForRemoteNotificationsWithError:", "application:didReceiveRemoteNotification:", "application:didReceiveLocalNotification:", "application:handleActionWithIdentifier:forLocalNotification:completionHandler:", "application:handleActionWithIdentifier:forRemoteNotification:withResponseInfo:completionHandler:", "application:handleActionWithIdentifier:forRemoteNotification:completionHandler:", "application:handleActionWithIdentifier:forLocalNotification:withResponseInfo:completionHandler:", "application:didReceiveRemoteNotification:fetchCompletionHandler:", "application:performFetchWithCompletionHandler:", "application:performActionForShortcutItem:completionHandler:", "application:handleEventsForBackgroundURLSession:completionHandler:", "application:handleWatchKitExtensionRequest:reply:", "applicationShouldRequestHealthAuthorization:", "applicationDidEnterBackground:", "applicationWillEnterForeground:", "applicationProtectedDataWillBecomeUnavailable:", "applicationProtectedDataDidBecomeAvailable:", "application:supportedInterfaceOrientationsForWindow:", "application:shouldAllowExtensionPointIdentifier:", "application:viewControllerWithRestorationIdentifierPath:coder:", "application:shouldSaveApplicationState:", "application:shouldRestoreApplicationState:", "application:willEncodeRestorableStateWithCoder:", "application:didDecodeRestorableStateWithCoder:", "application:willContinueUserActivityWithType:", "application:continueUserActivity:restorationHandler:", "application:didFailToContinueUserActivityWithType:error:", "application:didUpdateUserActivity:", "isEqual:", "hash", "superclass", "class", "self", "performSelector:", "performSelector:withObject:", "performSelector:withObject:withObject:", "isProxy", "isKindOfClass:", "isMemberOfClass:", "conformsToProtocol:", "respondsToSelector:", "retain", "release", "autorelease", "retainCount", "zone", "description", "debugDescription"
    ]

    let expectedClassNames = [ "SampleClass" ]

    let expectedCstrings = [ "_TtC12SampleIosApp14ViewController", "v12@0:4@8", "v8@0:4", "@16@0:4@8@12", "@12@0:4@8", "@?", "viewModel", "counterLabel", "T@\"UILabel\",N,W,VcounterLabel", "_TtC12SampleIosApp11AppDelegate", "@8@0:4", "window", "T@\"UIWindow\",N,&,Vwindow", "UIApplicationDelegate", "c16@0:4@8@12", "c24@0:4@8@12@16@20", "c20@0:4@8@12@16", "v24@0:4@8i12d16", "v16@0:4@8i12", "v28@0:4@8{CGRect={CGPoint=ff}{CGSize=ff}}12", "v16@0:4@8@12", "v24@0:4@8@12@16@?20", "v28@0:4@8@12@16@20@?24", "v20@0:4@8@12@?16", "v16@0:4@8@?12", "I16@0:4@8@12", "@20@0:4@8@12@16", "c20@0:4@8@12@?16", "v20@0:4@8@12@16", "T@\"UIWindow\",N,&", "v12@0:4@\"UIApplication\"8", "c16@0:4@\"UIApplication\"8@\"NSDictionary\"12", "c16@0:4@\"UIApplication\"8@\"NSURL\"12", "c24@0:4@\"UIApplication\"8@\"NSURL\"12@\"NSString\"16@20", "c20@0:4@\"UIApplication\"8@\"NSURL\"12@\"NSDictionary\"16", "v24@0:4@\"UIApplication\"8i12d16", "v16@0:4@\"UIApplication\"8i12", "v28@0:4@\"UIApplication\"8{CGRect={CGPoint=ff}{CGSize=ff}}12", "v16@0:4@\"UIApplication\"8@\"UIUserNotificationSettings\"12", "v16@0:4@\"UIApplication\"8@\"NSData\"12", "v16@0:4@\"UIApplication\"8@\"NSError\"12", "v16@0:4@\"UIApplication\"8@\"NSDictionary\"12", "v16@0:4@\"UIApplication\"8@\"UILocalNotification\"12", "v24@0:4@\"UIApplication\"8@\"NSString\"12@\"UILocalNotification\"16@?<v@?>20", "v28@0:4@\"UIApplication\"8@\"NSString\"12@\"NSDictionary\"16@\"NSDictionary\"20@?<v@?>24", "v24@0:4@\"UIApplication\"8@\"NSString\"12@\"NSDictionary\"16@?<v@?>20", "v28@0:4@\"UIApplication\"8@\"NSString\"12@\"UILocalNotification\"16@\"NSDictionary\"20@?<v@?>24", "v20@0:4@\"UIApplication\"8@\"NSDictionary\"12@?<v@?I>16", "v16@0:4@\"UIApplication\"8@?<v@?I>12", "v20@0:4@\"UIApplication\"8@\"UIApplicationShortcutItem\"12@?<v@?c>16", "v20@0:4@\"UIApplication\"8@\"NSString\"12@?<v@?>16", "v20@0:4@\"UIApplication\"8@\"NSDictionary\"12@?<v@?@\"NSDictionary\">16", "@\"UIWindow\"8@0:4", "v12@0:4@\"UIWindow\"8", "I16@0:4@\"UIApplication\"8@\"UIWindow\"12", "c16@0:4@\"UIApplication\"8@\"NSString\"12", "@\"UIViewController\"20@0:4@\"UIApplication\"8@\"NSArray\"12@\"NSCoder\"16", "c16@0:4@\"UIApplication\"8@\"NSCoder\"12", "v16@0:4@\"UIApplication\"8@\"NSCoder\"12", "c20@0:4@\"UIApplication\"8@\"NSUserActivity\"12@?<v@?@\"NSArray\">16", "v20@0:4@\"UIApplication\"8@\"NSString\"12@\"NSError\"16", "v16@0:4@\"UIApplication\"8@\"NSUserActivity\"12", "NSObject", "c12@0:4@8", "i8@0:4", "#8@0:4", "^@12@0:4:8", "^@16@0:4:8@12", "^@20@0:4:8@12@16", "c8@0:4", "c12@0:4#8", "c12@0:4:8", "^v8@0:4", "hash", "Ti,N,R", "superclass", "T#,N,R", "description", "T@\"NSString\",N,R", "debugDescription", "c12@0:4@\"Protocol\"8", "@\"NSString\"8@0:4" ]

    let sut = try! Image.load(url: URL.fatIosExecutable)

    func test_shouldParseEachComputedProperty() {
        guard case let .fat(fat) = sut.contents else {
            XCTFail("Unexpected contents")
            return
        }
        XCTAssertFalse(fat.architectures.isEmpty)
        let mach = fat.architectures[0].mach
        XCTAssertEqual(mach.selectors, expectedSelectors)
        XCTAssertEqual(mach.classNames,expectedClassNames)
        XCTAssertEqual(mach.cstrings, expectedCstrings)
        XCTAssertEqual(mach.exportedTrie?.children.count, 1)
        XCTAssertEqual(mach.importStack?.count, 70)
        // TODO: sample should have some weak bindings
        XCTAssertEqual(mach.importStack?.filter { $0.weak }.count, 0)
    }
}
